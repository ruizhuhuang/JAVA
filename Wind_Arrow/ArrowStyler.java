package com.google.keyhole.dataeng.vector.styling;

import com.google.geo.vectordb.LayerProtos.Layer;
import com.google.geo.vectordb.LayerProtos.StyledQuery;
import com.google.geo.vectordb.QueryProtos.Expression;
import com.google.geo.vectordb.QueryProtos.Predicate;
import com.google.geo.vectordb.QueryProtos.QueryValue;
import com.google.geo.vectordb.StyleProtos.Style;
import com.google.protobuf.ByteString;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import javax.imageio.ImageIO;

/**
 * This ArrowStyler library creates a protocol buffer layer file 
 * containing a custom arrow icon, a predicate specifying the angle 
 * of the arrow and lod_range(generated by rhuang)
 */

public class ArrowStyler {
  private String colorHex; // ex: "B8CBED"
  private int arrowLength;
  private int imageWidth, imageHeight;
  private Layer.Builder layerBuilder;
  private int lodRangeBegin, lodRangeEnd;

  public ArrowStyler(
      int arrowLength, String colorHex, String layerID, 
      int lodRangeBegin, int lodRangeEnd) {
    this.arrowLength = arrowLength;
    this.colorHex = colorHex;
    this.imageWidth = arrowLength;
    this.imageHeight = arrowLength;
    layerBuilder = Layer.newBuilder();
    layerBuilder.setId(layerID);
    this.lodRangeBegin = lodRangeBegin;
    this.lodRangeEnd = lodRangeEnd;
  }

  public Layer getLayer() {
    return layerBuilder.build();
  }

  public void writeToFile(String layerFileName) 
      throws IOException {
    PrintWriter out = new PrintWriter(new FileWriter(layerFileName));
    out.print(layerBuilder.toString());
    out.close();
  }


  public void addAngleStyle(String angleAttrName, int angle)
      throws SecurityException, IllegalArgumentException, IOException {

    StyledQuery.Builder sqBuilder = layerBuilder.addStyledQueryBuilder();
    sqBuilder.getLodRangeBuilder().setBegin(lodRangeBegin).setEnd(lodRangeEnd);
    Predicate.Builder predicateBuilder = sqBuilder.getPredicateBuilder();
    predicateBuilder.setType(Predicate.Type.AND);

    // angle sub predicate
    Predicate.Builder subPredBuilder = 
        predicateBuilder.addSubPredicateBuilder();
    Expression.Builder expBuilder = subPredBuilder.getLeafBuilder();
    expBuilder.setOp(Expression.Operator.EQUAL);

    QueryValue.Builder leftOperand = expBuilder.addOperandBuilder();
    leftOperand.setAttributeName(angleAttrName);

    QueryValue.Builder rightOperand = expBuilder.addOperandBuilder();
    rightOperand.getRawAttributeBuilder().setIntegerValue(angle);

    byte[] iconImage = getArrowImage(angle);
    Style.Builder styleBuilder = sqBuilder.getStyleBuilder();
    styleBuilder.getIconStyleBuilder().
    setCustomIcon(ByteString.copyFrom(iconImage));
  }

  public byte[] getArrowImage(int angle)
      throws IOException, SecurityException, IllegalArgumentException {

    int intValue = Integer.parseInt(colorHex, 16);
    Color color = new Color(intValue);

    BufferedImage image = new BufferedImage(
        imageWidth, imageHeight, BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2 = image.createGraphics();
    drawZeroDegreeArrow(g2, color);

    AffineTransform tx = new AffineTransform();
    double radians = Math.toRadians(-angle);
    double width = image.getWidth() / 2;
    double height = image.getHeight() / 2;

    if (angle != 180) {
      tx.translate(height, width);
      tx.rotate(radians);
      tx.translate(-width, -height);
    } else {
      tx.rotate(radians, width, height);
    }

    AffineTransformOp op = new AffineTransformOp(
        tx, AffineTransformOp.TYPE_BILINEAR);
    image = op.filter(image, null);

    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    ImageIO.write(image, "png", baos);
    baos.flush();
    byte[] imageInByte = baos.toByteArray();
    baos.close();

    return imageInByte;
  }

  private void drawZeroDegreeArrow(Graphics2D g, Color color) {
    g.setRenderingHint(
        RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

    g.setColor(new Color(0, 0, 0, 0));
    g.fillRect(0, 0, imageWidth, imageHeight);

    g.setStroke(new BasicStroke(
        arrowLength / 6, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER));
    g.translate(0, imageHeight / 2);

    float arrowRatio = 0.8f;
    float veeLength = arrowLength / 3.0f;

    BasicStroke stroke = (BasicStroke) g.getStroke();

    float endX = arrowLength;
    float veeX = endX - stroke.getLineWidth() * 0.5f / arrowRatio;

    // vee
    Path2D.Float path = new Path2D.Float();

    float waisting = 0.5f;

    float waistX = endX - veeLength * 0.5f;
    float waistY = arrowRatio * veeLength * 0.5f * waisting;
    float arrowWidth = arrowRatio * veeLength;

    path.moveTo(veeX - veeLength, -arrowWidth);
    path.quadTo(waistX, -waistY, endX, 0.0f);
    path.quadTo(waistX, waistY, veeX - veeLength, arrowWidth);

    // end of arrow is pinched in
    path.lineTo(veeX - veeLength * 0.75f, 0.0f);
    path.lineTo(veeX - veeLength, -arrowWidth);

    g.setColor(color);
    g.fill(path);

    // move stem back a bit
    g.setColor(color);
    g.draw(new Line2D.Float(0.0f, 0.0f, veeX - veeLength * 0.5f, 0.0f));
  }

}
