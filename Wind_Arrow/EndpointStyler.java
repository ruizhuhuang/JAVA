package com.google.keyhole.dataeng.vector.styling;

import com.google.common.base.Strings;
import com.google.common.collect.Sets;
import com.google.common.flags.Flag;
import com.google.common.flags.FlagSpec;
import com.google.common.flags.Flags;
import com.google.geo.vectordb.LayerProtos;

import org.gdal.GoogleGdalLoader;
import org.gdal.ogr.DataSource;
import org.gdal.ogr.Driver;
import org.gdal.ogr.Feature;
import org.gdal.ogr.FeatureDefn;
import org.gdal.ogr.FieldDefn;
import org.gdal.ogr.Geometry;
import org.gdal.ogr.Layer;
import org.gdal.ogr.ogr;

import java.io.File;
import java.io.IOException;
import java.util.Set;

/**
 * If inputShapefile flag, outputShapefile flag and outputLayerFile 
 * are provided, this program generates starting point layer from the 
 * input line layer and creates a protocol buffer layer file with custom arrow
 * of needed degrees.
 *  If only outputLayerFile is provided, it generates a layer protocol
 *  of all 91 different degrees, i.e. 0, 4, 8, ..., 356.
 *  (generated by rhuang)
 */

public class EndpointStyler {
  @FlagSpec(help = "Input shape file", altName = "inputShapefile")
  private static final Flag<String> inputShapefile = Flag.value("");

  @FlagSpec(help = "Output shape file", altName = "outputShapefile")
  private static final Flag<String> outputShapefile = Flag.value("");

  @FlagSpec(help = "Output layer file", altName = "outputLayerFile")
  private static final Flag<String> outputLayerFile = Flag.value("");
  
  @FlagSpec(help = "Arrow length", altName = "arrowLength")
  private static final Flag<Integer> arrowLength = Flag.value(16);
  
  @FlagSpec(help = "Arrow color", altName = "color")
  private static final Flag<String> color = Flag.value("002E72");
  
  @FlagSpec(help = "Layer protocol ID", altName = "layerID")
  private static final Flag<String> layerID = Flag.value("12345");  

  private Layer lineLayer;

  public EndpointStyler() {}

  public void createStartPointFromLine(
      Layer outputLayer, Feature lineLayerFeature, int angle4) {
    Geometry point = new Geometry(ogr.wkbPoint);
    double longitude = lineLayerFeature.GetGeometryRef().GetPoint(0)[0];
    double latitude = lineLayerFeature.GetGeometryRef().GetPoint(0)[1];
    point.SetPoint(0, longitude, latitude);

    Feature pointFeature = new Feature(outputLayer.GetLayerDefn());
    int fieldCount = pointFeature.GetFieldCount();
    for (int i = 0; i < fieldCount - 1; i++) {
      pointFeature.SetField(
          pointFeature.GetFieldDefnRef(i).GetName(), 
          lineLayerFeature.GetFieldAsString(i));
    }
    pointFeature.SetField("angle4", angle4);
    // put point as a geometry inside a feature
    pointFeature.SetGeometry(point);
    // Create a point feature
    outputLayer.CreateFeature(pointFeature);
  }

  public Feature getNext() {
    return lineLayer.GetNextFeature();
  }

  public void getInputLayer(String inputShapefilePath) {
    ogr.RegisterAll();
    DataSource dataSource = ogr.Open(
        inputShapefilePath, false);
    lineLayer = dataSource.GetLayer(0);
  }

  public int getAngleInterval4(Feature feature) {
    // Extract start point and end point from a line
    double[] fromPoint = feature.GetGeometryRef().GetPoint(0);
    double[] toPoint = feature.GetGeometryRef().GetPoint(1);
    double dLat = Math.toRadians(toPoint[1] - fromPoint[1]);
    double dLng = Math.toRadians(toPoint[0] - fromPoint[0]);
    double angle = Math.toDegrees(Math.atan2(dLat, dLng));
    if (angle < 0) {
      angle += 360;
    }
    return (((int) angle) / 4) * 4;
  }

  public Layer initializePointLayer(String ouputShpfilePath) {
    // Create point shape file
    Driver driver = ogr.GetDriverByName("ESRI Shapefile");
    String shpfile = ouputShpfilePath;
    File f = new File(shpfile);
    if (f.exists()) {
      driver.DeleteDataSource(shpfile);
    }
    DataSource ds = driver.CreateDataSource(shpfile);
    // Create layer
    Layer pointLayer = ds.CreateLayer(
        "fromPoint", lineLayer.GetSpatialRef(), ogr.wkbPoint);
    // Create fields for point layer
    FeatureDefn lineFeatureDefn = lineLayer.GetLayerDefn();
    int fieldCount = lineLayer.GetLayerDefn().GetFieldCount();
    for (int i = 0; i < fieldCount; i++) {
      FieldDefn fieldDefn = lineFeatureDefn.GetFieldDefn(i);
      pointLayer.CreateField(
          new FieldDefn(fieldDefn.GetName(), fieldDefn.GetFieldType()));
    }
    pointLayer.CreateField(new FieldDefn("angle4", ogr.OFTInteger));
    return pointLayer;
  }

  public static void main(String[] args) throws IOException {
    Set<Integer> neededDegrees = Sets.newTreeSet();
    GoogleGdalLoader.init();    
    // Process the command-line flags.
    Flags.parse(args);
    EndpointStyler endpointStyler = new EndpointStyler();
    String shpfile = inputShapefile.get();
    File f = new File(shpfile);
    
    if (f.exists()) {
      System.out.println(
          "inputShapefile: " + inputShapefile.get());
      // get lineLayer
      endpointStyler.getInputLayer(inputShapefile.get());

      // create output shapefile
      Layer pointLayer = (Strings.isNullOrEmpty(outputShapefile.get())) ? null
          : endpointStyler.initializePointLayer(outputShapefile.get());

      Feature lineFeature = endpointStyler.getNext();

      while (lineFeature != null) {
        int angle4 = endpointStyler.getAngleInterval4(lineFeature);
        neededDegrees.add(angle4);
        if (pointLayer != null) {
          endpointStyler.createStartPointFromLine(pointLayer, lineFeature, angle4);
        }
        lineFeature = endpointStyler.getNext();
      }
      // finalize output shapefile here
      if (pointLayer != null) {
        System.out.println(
            "outputShapefile: " + outputShapefile.get());
        pointLayer.SyncToDisk();
      }
    }

    if (!Strings.isNullOrEmpty(outputLayerFile.get())) {
      if (neededDegrees.isEmpty()) {
        for (int i = 0; i < 360; i += 4) {
          neededDegrees.add(i);
        }
      }
      System.out.print("Degree set:\n" + neededDegrees + "\n");

      ArrowStyler arrowStyler = new ArrowStyler(
          arrowLength.get(), color.get(), layerID.get(), 5, 20);

      for (int degree : neededDegrees) {
        arrowStyler.addAngleStyle("angle4", degree);
      }
      LayerProtos.Layer layer = arrowStyler.getLayer();
      arrowStyler.writeToFile(outputLayerFile.get());
      System.out.println(
          "outputLayerFile: " + outputLayerFile.get());
    }
  }
}
